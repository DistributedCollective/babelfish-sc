
> @mstable/protocol@1.5.0 script:rskTestnet /Users/gadiguy/workspace/babelfish-phase-1
> truffle --network rskTestnet exec ./scripts/main.js "upgradeMasset"

Using network 'rskTestnet'.

{
  Buffer: [Function: Buffer] {
    poolSize: 8192,
    from: [Function: from],
    of: [Function: of],
    alloc: [Function: alloc],
    allocUnsafe: [Function: allocUnsafe],
    allocUnsafeSlow: [Function: allocUnsafeSlow],
    isBuffer: [Function: isBuffer],
    compare: [Function: compare],
    isEncoding: [Function: isEncoding],
    concat: [Function: concat],
    byteLength: [Function: byteLength],
    [Symbol(kIsEncodingSymbol)]: [Function: isEncoding]
  },
  __dirname: '/Users/gadiguy/workspace/babelfish-phase-1/scripts',
  __filename: '/Users/gadiguy/workspace/babelfish-phase-1/scripts/main.js',
  clearImmediate: [Function: clearImmediate],
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  console: {
    log: [Function: bound consoleCall],
    warn: [Function: bound consoleCall],
    dir: [Function: bound consoleCall],
    time: [Function: bound consoleCall],
    timeEnd: [Function: bound consoleCall],
    timeLog: [Function: bound consoleCall],
    trace: [Function: bound consoleCall],
    assert: [Function: bound consoleCall],
    clear: [Function: bound consoleCall],
    count: [Function: bound consoleCall],
    countReset: [Function: bound consoleCall],
    group: [Function: bound consoleCall],
    groupEnd: [Function: bound consoleCall],
    table: [Function: bound consoleCall],
    debug: [Function: bound consoleCall],
    info: [Function: bound consoleCall],
    dirxml: [Function: bound consoleCall],
    error: [Function: bound consoleCall],
    groupCollapsed: [Function: bound consoleCall],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context],
    [Symbol(kBindStreamsEager)]: [Function: bound ],
    [Symbol(kBindStreamsLazy)]: [Function: bound ],
    [Symbol(kBindProperties)]: [Function: bound ],
    [Symbol(kWriteToConsole)]: [Function: bound ],
    [Symbol(kGetInspectOptions)]: [Function: bound ],
    [Symbol(kFormatForStdout)]: [Function: bound ],
    [Symbol(kFormatForStderr)]: [Function: bound ]
  },
  exports: {},
  global: <ref *1> Object [global] {
    global: [Circular *1],
    clearInterval: [Function: clearInterval],
    clearTimeout: [Function: clearTimeout],
    setInterval: [Function: setInterval],
    setTimeout: [Function: setTimeout] {
      [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
    },
    queueMicrotask: [Function: queueMicrotask],
    clearImmediate: [Function: clearImmediate],
    setImmediate: [Function: setImmediate] {
      [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
    },
    '@@any-promise/REGISTRATION': { Promise: [Function: Promise], implementation: 'global.Promise' },
    '__core-js_shared__': {
      versions: [Array],
      keys: [Object],
      wks: [Object],
      inspectSource: [Function (anonymous)]
    },
    _: [Function: lodash] {
      templateSettings: [Object],
      after: [Function: after],
      ary: [Function: ary],
      assign: [Function (anonymous)],
      assignIn: [Function (anonymous)],
      assignInWith: [Function (anonymous)],
      assignWith: [Function (anonymous)],
      at: [Function (anonymous)],
      before: [Function: before],
      bind: [Function],
      bindAll: [Function (anonymous)],
      bindKey: [Function],
      castArray: [Function: castArray],
      chain: [Function: chain],
      chunk: [Function: chunk],
      compact: [Function: compact],
      concat: [Function: concat],
      cond: [Function: cond],
      conforms: [Function: conforms],
      constant: [Function: constant],
      countBy: [Function (anonymous)],
      create: [Function: create],
      curry: [Function],
      curryRight: [Function],
      debounce: [Function: debounce],
      defaults: [Function (anonymous)],
      defaultsDeep: [Function (anonymous)],
      defer: [Function (anonymous)],
      delay: [Function (anonymous)],
      difference: [Function (anonymous)],
      differenceBy: [Function (anonymous)],
      differenceWith: [Function (anonymous)],
      drop: [Function: drop],
      dropRight: [Function: dropRight],
      dropRightWhile: [Function: dropRightWhile],
      dropWhile: [Function: dropWhile],
      fill: [Function: fill],
      filter: [Function: filter],
      flatMap: [Function: flatMap],
      flatMapDeep: [Function: flatMapDeep],
      flatMapDepth: [Function: flatMapDepth],
      flatten: [Function: flatten],
      flattenDeep: [Function: flattenDeep],
      flattenDepth: [Function: flattenDepth],
      flip: [Function: flip],
      flow: [Function (anonymous)],
      flowRight: [Function (anonymous)],
      fromPairs: [Function: fromPairs],
      functions: [Function: functions],
      functionsIn: [Function: functionsIn],
      groupBy: [Function (anonymous)],
      initial: [Function: initial],
      intersection: [Function (anonymous)],
      intersectionBy: [Function (anonymous)],
      intersectionWith: [Function (anonymous)],
      invert: [Function (anonymous)],
      invertBy: [Function (anonymous)],
      invokeMap: [Function (anonymous)],
      iteratee: [Function: iteratee],
      keyBy: [Function (anonymous)],
      keys: [Function: keys],
      keysIn: [Function: keysIn],
      map: [Function: map],
      mapKeys: [Function: mapKeys],
      mapValues: [Function: mapValues],
      matches: [Function: matches],
      matchesProperty: [Function: matchesProperty],
      memoize: [Function],
      merge: [Function (anonymous)],
      mergeWith: [Function (anonymous)],
      method: [Function (anonymous)],
      methodOf: [Function (anonymous)],
      mixin: [Function: mixin],
      negate: [Function: negate],
      nthArg: [Function: nthArg],
      omit: [Function (anonymous)],
      omitBy: [Function: omitBy],
      once: [Function: once],
      orderBy: [Function: orderBy],
      over: [Function (anonymous)],
      overArgs: [Function (anonymous)],
      overEvery: [Function (anonymous)],
      overSome: [Function (anonymous)],
      partial: [Function],
      partialRight: [Function],
      partition: [Function (anonymous)],
      pick: [Function (anonymous)],
      pickBy: [Function: pickBy],
      property: [Function: property],
      propertyOf: [Function: propertyOf],
      pull: [Function (anonymous)],
      pullAll: [Function: pullAll],
      pullAllBy: [Function: pullAllBy],
      pullAllWith: [Function: pullAllWith],
      pullAt: [Function (anonymous)],
      range: [Function (anonymous)],
      rangeRight: [Function (anonymous)],
      rearg: [Function (anonymous)],
      reject: [Function: reject],
      remove: [Function: remove],
      rest: [Function: rest],
      reverse: [Function: reverse],
      sampleSize: [Function: sampleSize],
      set: [Function: set],
      setWith: [Function: setWith],
      shuffle: [Function: shuffle],
      slice: [Function: slice],
      sortBy: [Function (anonymous)],
      sortedUniq: [Function: sortedUniq],
      sortedUniqBy: [Function: sortedUniqBy],
      split: [Function: split],
      spread: [Function: spread],
      tail: [Function: tail],
      take: [Function: take],
      takeRight: [Function: takeRight],
      takeRightWhile: [Function: takeRightWhile],
      takeWhile: [Function: takeWhile],
      tap: [Function: tap],
      throttle: [Function: throttle],
      thru: [Function: thru],
      toArray: [Function: toArray],
      toPairs: [Function (anonymous)],
      toPairsIn: [Function (anonymous)],
      toPath: [Function: toPath],
      toPlainObject: [Function: toPlainObject],
      transform: [Function: transform],
      unary: [Function: unary],
      union: [Function (anonymous)],
      unionBy: [Function (anonymous)],
      unionWith: [Function (anonymous)],
      uniq: [Function: uniq],
      uniqBy: [Function: uniqBy],
      uniqWith: [Function: uniqWith],
      unset: [Function: unset],
      unzip: [Function: unzip],
      unzipWith: [Function: unzipWith],
      update: [Function: update],
      updateWith: [Function: updateWith],
      values: [Function: values],
      valuesIn: [Function: valuesIn],
      without: [Function (anonymous)],
      words: [Function: words],
      wrap: [Function: wrap],
      xor: [Function (anonymous)],
      xorBy: [Function (anonymous)],
      xorWith: [Function (anonymous)],
      zip: [Function (anonymous)],
      zipObject: [Function: zipObject],
      zipObjectDeep: [Function: zipObjectDeep],
      zipWith: [Function (anonymous)],
      entries: [Function (anonymous)],
      entriesIn: [Function (anonymous)],
      extend: [Function (anonymous)],
      extendWith: [Function (anonymous)],
      add: [Function (anonymous)],
      attempt: [Function (anonymous)],
      camelCase: [Function (anonymous)],
      capitalize: [Function: capitalize],
      ceil: [Function (anonymous)],
      clamp: [Function: clamp],
      clone: [Function: clone],
      cloneDeep: [Function: cloneDeep],
      cloneDeepWith: [Function: cloneDeepWith],
      cloneWith: [Function: cloneWith],
      conformsTo: [Function: conformsTo],
      deburr: [Function: deburr],
      defaultTo: [Function: defaultTo],
      divide: [Function (anonymous)],
      endsWith: [Function: endsWith],
      eq: [Function: eq],
      escape: [Function: escape],
      escapeRegExp: [Function: escapeRegExp],
      every: [Function: every],
      find: [Function (anonymous)],
      findIndex: [Function: findIndex],
      findKey: [Function: findKey],
      findLast: [Function (anonymous)],
      findLastIndex: [Function: findLastIndex],
      findLastKey: [Function: findLastKey],
      floor: [Function (anonymous)],
      forEach: [Function: forEach],
      forEachRight: [Function: forEachRight],
      forIn: [Function: forIn],
      forInRight: [Function: forInRight],
      forOwn: [Function: forOwn],
      forOwnRight: [Function: forOwnRight],
      get: [Function: get],
      gt: [Function (anonymous)],
      gte: [Function (anonymous)],
      has: [Function: has],
      hasIn: [Function: hasIn],
      head: [Function: head],
      identity: [Function: identity],
      includes: [Function: includes],
      indexOf: [Function: indexOf],
      inRange: [Function: inRange],
      invoke: [Function (anonymous)],
      isArguments: [Function: baseIsArguments],
      isArray: [Function: isArray],
      isArrayBuffer: [Function (anonymous)],
      isArrayLike: [Function: isArrayLike],
      isArrayLikeObject: [Function: isArrayLikeObject],
      isBoolean: [Function: isBoolean],
      isBuffer: [Function: isBuffer],
      isDate: [Function (anonymous)],
      isElement: [Function: isElement],
      isEmpty: [Function: isEmpty],
      isEqual: [Function: isEqual],
      isEqualWith: [Function: isEqualWith],
      isError: [Function: isError],
      isFinite: [Function: isFinite],
      isFunction: [Function: isFunction],
      isInteger: [Function: isInteger],
      isLength: [Function: isLength],
      isMap: [Function (anonymous)],
      isMatch: [Function: isMatch],
      isMatchWith: [Function: isMatchWith],
      isNaN: [Function: isNaN],
      isNative: [Function: isNative],
      isNil: [Function: isNil],
      isNull: [Function: isNull],
      isNumber: [Function: isNumber],
      isObject: [Function: isObject],
      isObjectLike: [Function: isObjectLike],
      isPlainObject: [Function: isPlainObject],
      isRegExp: [Function (anonymous)],
      isSafeInteger: [Function: isSafeInteger],
      isSet: [Function (anonymous)],
      isString: [Function: isString],
      isSymbol: [Function: isSymbol],
      isTypedArray: [Function (anonymous)],
      isUndefined: [Function: isUndefined],
      isWeakMap: [Function: isWeakMap],
      isWeakSet: [Function: isWeakSet],
      join: [Function: join],
      kebabCase: [Function (anonymous)],
      last: [Function: last],
      lastIndexOf: [Function: lastIndexOf],
      lowerCase: [Function (anonymous)],
      lowerFirst: [Function (anonymous)],
      lt: [Function (anonymous)],
      lte: [Function (anonymous)],
      max: [Function: max],
      maxBy: [Function: maxBy],
      mean: [Function: mean],
      meanBy: [Function: meanBy],
      min: [Function: min],
      minBy: [Function: minBy],
      stubArray: [Function: stubArray],
      stubFalse: [Function: stubFalse],
      stubObject: [Function: stubObject],
      stubString: [Function: stubString],
      stubTrue: [Function: stubTrue],
      multiply: [Function (anonymous)],
      nth: [Function: nth],
      noConflict: [Function: noConflict],
      noop: [Function: noop],
      now: [Function (anonymous)],
      pad: [Function: pad],
      padEnd: [Function: padEnd],
      padStart: [Function: padStart],
      parseInt: [Function: parseInt],
      random: [Function: random],
      reduce: [Function: reduce],
      reduceRight: [Function: reduceRight],
      repeat: [Function: repeat],
      replace: [Function: replace],
      result: [Function: result],
      round: [Function (anonymous)],
      runInContext: [Function: runInContext],
      sample: [Function: sample],
      size: [Function: size],
      snakeCase: [Function (anonymous)],
      some: [Function: some],
      sortedIndex: [Function: sortedIndex],
      sortedIndexBy: [Function: sortedIndexBy],
      sortedIndexOf: [Function: sortedIndexOf],
      sortedLastIndex: [Function: sortedLastIndex],
      sortedLastIndexBy: [Function: sortedLastIndexBy],
      sortedLastIndexOf: [Function: sortedLastIndexOf],
      startCase: [Function (anonymous)],
      startsWith: [Function: startsWith],
      subtract: [Function (anonymous)],
      sum: [Function: sum],
      sumBy: [Function: sumBy],
      template: [Function: template],
      times: [Function: times],
      toFinite: [Function: toFinite],
      toInteger: [Function: toInteger],
      toLength: [Function: toLength],
      toLower: [Function: toLower],
      toNumber: [Function: toNumber],
      toSafeInteger: [Function: toSafeInteger],
      toString: [Function: toString],
      toUpper: [Function: toUpper],
      trim: [Function: trim],
      trimEnd: [Function: trimEnd],
      trimStart: [Function: trimStart],
      truncate: [Function: truncate],
      unescape: [Function: unescape],
      uniqueId: [Function: uniqueId],
      upperCase: [Function (anonymous)],
      upperFirst: [Function (anonymous)],
      each: [Function: forEach],
      eachRight: [Function: forEachRight],
      first: [Function: head],
      VERSION: '4.17.14'
    }
  },
  module: Module {
    id: '/Users/gadiguy/workspace/babelfish-phase-1/scripts/main.js',
    path: '/Users/gadiguy/workspace/babelfish-phase-1/scripts',
    exports: [Function (anonymous)],
    parent: undefined,
    filename: null,
    loaded: false,
    children: []
  },
  process: process {
    version: 'v13.12.0',
    versions: {
      node: '13.12.0',
      v8: '7.9.317.25-node.30',
      uv: '1.35.0',
      zlib: '1.2.11',
      brotli: '1.0.7',
      ares: '1.16.0',
      modules: '79',
      nghttp2: '1.40.0',
      napi: '6',
      llhttp: '2.0.4',
      openssl: '1.1.1e',
      cldr: '36.1',
      icu: '66.1',
      tz: '2019c',
      unicode: '13.0'
    },
    arch: 'x64',
    platform: 'darwin',
    release: {
      name: 'node',
      sourceUrl: 'https://nodejs.org/download/release/v13.12.0/node-v13.12.0.tar.gz',
      headersUrl: 'https://nodejs.org/download/release/v13.12.0/node-v13.12.0-headers.tar.gz'
    },
    _rawDebug: [Function: _rawDebug],
    moduleLoadList: [
      'Internal Binding native_module',
      'Internal Binding errors',
      'Internal Binding buffer',
      'NativeModule internal/errors',
      'Internal Binding config',
      'Internal Binding constants',
      'Internal Binding util',
      'Internal Binding types',
      'NativeModule internal/util',
      'NativeModule internal/util/types',
      'NativeModule internal/assert',
      'Internal Binding icu',
      'NativeModule internal/util/inspect',
      'NativeModule events',
      'Internal Binding string_decoder',
      'NativeModule internal/validators',
      'NativeModule internal/buffer',
      'NativeModule buffer',
      'NativeModule internal/process/per_thread',
      'Internal Binding process_methods',
      'Internal Binding credentials',
      'Internal Binding async_wrap',
      'Internal Binding task_queue',
      'NativeModule internal/async_hooks',
      'NativeModule internal/process/promises',
      'NativeModule internal/fixed_queue',
      'NativeModule internal/process/task_queues',
      'Internal Binding trace_events',
      'NativeModule internal/console/constructor',
      'NativeModule internal/console/global',
      'NativeModule internal/util/inspector',
      'Internal Binding inspector',
      'NativeModule internal/querystring',
      'NativeModule internal/constants',
      'NativeModule path',
      'Internal Binding url',
      'NativeModule internal/url',
      'NativeModule internal/encoding',
      'Internal Binding timers',
      'NativeModule internal/linkedlist',
      'NativeModule internal/priority_queue',
      'NativeModule internal/util/debuglog',
      'NativeModule internal/timers',
      'NativeModule timers',
      'NativeModule internal/process/execution',
      'NativeModule internal/process/warning',
      'NativeModule internal/process/signal',
      'Internal Binding options',
      'NativeModule internal/options',
      'NativeModule internal/bootstrap/pre_execution',
      'NativeModule internal/inspector_async_hook',
      'Internal Binding report',
      'NativeModule internal/process/report',
      'Internal Binding fs',
      'NativeModule internal/fs/utils',
      'Internal Binding fs_dir',
      'NativeModule internal/fs/dir',
      'NativeModule fs',
      'NativeModule internal/idna',
      'NativeModule url',
      'NativeModule internal/modules/cjs/helpers',
      'NativeModule internal/source_map/source_map_cache',
      'Internal Binding contextify',
      'NativeModule vm',
      'Internal Binding module_wrap',
      'NativeModule internal/modules/esm/module_job',
      'NativeModule internal/modules/esm/module_map',
      'NativeModule internal/modules/esm/resolve',
      'NativeModule internal/modules/esm/get_format',
      'NativeModule internal/modules/esm/get_source',
      'NativeModule internal/modules/esm/transform_source',
      'NativeModule internal/modules/esm/create_dynamic_module',
      'NativeModule internal/modules/esm/translators',
      'NativeModule internal/modules/esm/loader',
      'NativeModule internal/vm/module',
      'NativeModule internal/process/esm_loader',
      'NativeModule internal/modules/cjs/loader',
      'NativeModule internal/modules/run_main',
      'NativeModule internal/streams/destroy',
      'NativeModule internal/streams/pipeline',
      'NativeModule internal/streams/end-of-stream',
      'NativeModule internal/streams/legacy',
      'NativeModule internal/streams/buffer_list',
      'NativeModule internal/streams/state',
      'NativeModule _stream_readable',
      'NativeModule _stream_writable',
      'NativeModule _stream_duplex',
      'NativeModule _stream_transform',
      'NativeModule _stream_passthrough',
      'NativeModule stream',
      'NativeModule internal/fs/streams',
      'NativeModule internal/fs/rimraf',
      'NativeModule internal/fs/promises',
      'NativeModule util',
      'NativeModule internal/net',
      'Internal Binding uv',
      'Internal Binding stream_wrap',
      'Internal Binding tcp_wrap',
      'Internal Binding pipe_wrap',
      'NativeModule internal/stream_base_commons',
      ... 93 more items
    ],
    binding: [Function: binding],
    _linkedBinding: [Function: _linkedBinding],
    _events: [Object: null prototype] {
      newListener: [Array],
      removeListener: [Array],
      SIGWINCH: [Function (anonymous)],
      exit: [Array],
      SIGINT: [Array]
    },
    _eventsCount: 5,
    _maxListeners: undefined,
    domain: [Getter/Setter],
    _exiting: false,
    config: { target_defaults: [Object], variables: [Object] },
    dlopen: [Function: dlopen],
    uptime: [Function: uptime],
    _getActiveRequests: [Function: _getActiveRequests],
    _getActiveHandles: [Function: _getActiveHandles],
    reallyExit: [Function: reallyExit],
    _kill: [Function: _kill],
    hrtime: [Function: hrtime] { bigint: [Function: hrtimeBigInt] },
    cpuUsage: [Function: cpuUsage],
    resourceUsage: [Function: resourceUsage],
    memoryUsage: [Function: memoryUsage],
    kill: [Function: kill],
    exit: [Function: exit],
    openStdin: [Function (anonymous)],
    getuid: [Function: getuid],
    geteuid: [Function: geteuid],
    getgid: [Function: getgid],
    getegid: [Function: getegid],
    getgroups: [Function: getgroups],
    allowedNodeEnvironmentFlags: [Getter/Setter],
    assert: [Function: deprecated],
    features: {
      inspector: true,
      debug: false,
      uv: true,
      ipv6: true,
      tls_alpn: true,
      tls_sni: true,
      tls_ocsp: true,
      tls: true,
      cached_builtins: true
    },
    _fatalException: [Function (anonymous)],
    setUncaughtExceptionCaptureCallback: [Function (anonymous)],
    hasUncaughtExceptionCaptureCallback: [Function: hasUncaughtExceptionCaptureCallback],
    emitWarning: [Function: emitWarning],
    nextTick: [Function: nextTick],
    _tickCallback: [Function: runNextTicks],
    _debugProcess: [Function: _debugProcess],
    _debugEnd: [Function: _debugEnd],
    _startProfilerIdleNotifier: [Function: _startProfilerIdleNotifier],
    _stopProfilerIdleNotifier: [Function: _stopProfilerIdleNotifier],
    stdout: [Getter],
    stdin: [Getter],
    stderr: [Getter],
    abort: [Function: abort],
    umask: [Function: wrappedUmask],
    chdir: [Function (anonymous)],
    cwd: [Function (anonymous)],
    initgroups: [Function: initgroups],
    setgroups: [Function: setgroups],
    setegid: [Function (anonymous)],
    seteuid: [Function (anonymous)],
    setgid: [Function (anonymous)],
    setuid: [Function (anonymous)],
    env: {
      npm_config_save_dev: '',
      npm_config_legacy_bundling: '',
      npm_config_dry_run: '',
      npm_config_viewer: 'man',
      npm_config_only: '',
      npm_config_commit_hooks: 'true',
      npm_config_browser: '',
      npm_package_gitHead: '35ffe71ec5736efc2d4702dfaced413ddef8f0f9',
      npm_package_devDependencies_prettier: '^1.18.2',
      npm_package_scripts_prettify: 'prettier --write test/*.ts test/**/*.ts types/generated/*.ts types/*.ts artifacts/*.ts',
      npm_config_also: '',
      npm_config_sign_git_commit: '',
      npm_config_rollback: 'true',
      npm_package_devDependencies_web3_utils: '1.2.6',
      npm_package_devDependencies__truffle_hdwallet_provider: '^1.0.34',
      npm_package_scripts_script_rskTestnet: 'truffle --network rskTestnet exec ./scripts/main.js "upgradeMasset"',
      TERM_PROGRAM: 'Apple_Terminal',
      NODE: '/usr/local/bin/node',
      npm_config_usage: '',
      npm_config_audit: 'true',
      npm_package_scripts_flatten: 'sol-merger "./contracts/**/*.sol" ./_flat',
      INIT_CWD: '/Users/gadiguy/workspace/babelfish-phase-1',
      npm_package_homepage: 'https://github.com/mstable/mstable-contracts#readme',
      npm_package_devDependencies_typescript: '^3.6.3',
      NVM_CD_FLAGS: '',
      npm_config_globalignorefile: '/usr/local/etc/npmignore',
      npm_package_devDependencies_mocha: '^7.0.1',
      SHELL: '/bin/bash',
      TERM: 'xterm-256color',
      npm_config_shell: '/bin/bash',
      npm_config_maxsockets: '50',
      npm_config_init_author_url: '',
      npm_package_devDependencies_eslint_import_resolver_alias: '^1.1.2',
      npm_config_shrinkwrap: 'true',
      npm_config_parseable: '',
      npm_config_metrics_registry: 'https://registry.npmjs.org/',
      TMPDIR: '/var/folders/qy/_63bh9851znd2q6yk9hp76pw0000gn/T/',
      npm_config_timing: '',
      npm_config_init_license: 'ISC',
      npm_package_dependencies_ts_node: '^8.4.1',
      npm_package_scripts_lint: 'yarn run lint-ts; yarn run lint-sol',
      Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.bpO7usvFVe/Render',
      npm_config_if_present: '',
      npm_package_devDependencies_truffle: '5.1.22',
      npm_package_devDependencies__types_chai: '^4.2.2',
      TERM_PROGRAM_VERSION: '421.2',
      npm_package_scripts_lint_ts: 'yarn eslint ./test --ext .ts,.js --fix --quiet',
      npm_config_sign_git_tag: '',
      npm_config_init_author_email: '',
      npm_config_cache_max: 'Infinity',
      npm_package_devDependencies_parse_duration: '^0.1.2',
      npm_package_scripts_prepublishOnly: 'yarn run compile',
      npm_config_preid: '',
      npm_config_long: '',
      npm_config_local_address: '',
      npm_config_git_tag_version: 'true',
      npm_config_cert: '',
      npm_package_directories_test: 'test',
      npm_package_devDependencies__types_mocha: '^5.2.7',
      TERM_SESSION_ID: '452944E6-F8A7-4695-82B3-F42CA6BA21AC',
      npm_config_registry: 'https://registry.npmjs.org/',
      npm_config_noproxy: '',
      npm_config_fetch_retries: '2',
      npm_package_devDependencies_humanize_duration: '^3.21.0',
      npm_package_devDependencies__nomiclabs_hardhat_web3: '^2.0.0',
      npm_package_devDependencies__openzeppelin_test_helpers: 'git+https://git@github.com/alsco77/openzeppelin-test-helpers.git',
      npm_package_repository_url: 'git+https://github.com/mstable/mstable-contracts.git',
      npm_config_versions: '',
      npm_config_message: '%s',
      npm_config_key: '',
      npm_package_readmeFilename: 'README.md',
      npm_package_devDependencies_eslint_plugin_jsx_a11y: '^6.2.3',
      npm_package_scripts_migrate_rsk: 'truffle migrate --network rsk --reset',
      npm_package_description: 'mStable Contracts',
      USER: 'gadiguy',
      NVM_DIR: '/Users/gadiguy/.nvm',
      npm_package_devDependencies__openzeppelin_contracts: '2.5.0',
      npm_package_license: 'AGPL-3.0-or-later',
      npm_config_globalconfig: '/usr/local/etc/npmrc',
      npm_config_prefer_online: '',
      npm_config_logs_max: '10',
      npm_config_always_auth: '',
      SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.32E9GzE9zp/Listeners',
      npm_package_devDependencies_eslint: '^6.8.0',
      __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0',
      npm_execpath: '/usr/local/lib/node_modules/npm/bin/npm-cli.js',
      npm_config_global_style: '',
      npm_config_cache_lock_retries: '10',
      npm_package_devDependencies__typescript_eslint_eslint_plugin: '^2.21.0',
      npm_package_scripts_coverage: "yarn hardhat compile --force && node --max_old_space_size=6144 node_modules/.bin/hardhat coverage --temp 'build/contracts' --testfiles 'test/**/Test*.ts' --show-stack-traces",
      npm_config_update_notifier: 'true',
      npm_config_cafile: '',
      npm_package_scripts_script_rsk: 'truffle --network rsk exec ./scripts/main.js',
      npm_package_author_name: 'mStable',
      npm_config_heading: 'npm',
      npm_config_audit_level: 'low',
      npm_package_devDependencies_types_ethereumjs_util: '^0.0.8',
      npm_package_scripts_test_file: 'yarn hardhat test',
      npm_package_scripts_script: 'yarn truffle exec ./scripts/main.js',
      npm_config_searchlimit: '20',
      npm_config_read_only: '',
      npm_config_offline: '',
      npm_config_fetch_retry_mintimeout: '10000',
      npm_package_devDependencies__typescript_eslint_parser: '^2.21.0',
      npm_config_json: '',
      npm_config_access: '',
      npm_config_argv: '{"remain":["upgradeMasset"],"cooked":["run","script:rskTestnet","upgradeMasset"],"original":["run","script:rskTestnet","upgradeMasset"]}',
      npm_package_dependencies_tsconfig_paths: '^3.9.0',
      PATH: '/usr/local/lib/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/Users/gadiguy/workspace/babelfish-phase-1/node_modules/.bin:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/gadiguy/google-cloud-sdk/bin:/Users/gadiguy/workspace/flutter/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:~/apache-maven-3.5.4/bin:/usr/local/go/bin:/opt/X11/bin:/Users/gadiguy/.local/bin:/Users/gadiguy/Library/Python/3.9/bin',
      MAVEN_HOME: '/Users/gadiguy/apache-maven-3.5.4',
      npm_config_allow_same_version: '',
      npm_package_devDependencies_ethlint: '^1.2.5',
      npm_package_devDependencies_chai_bn: '^0.2.0',
      npm_config_https_proxy: '',
      npm_config_engine_strict: '',
      npm_config_description: 'true',
      npm_package_devDependencies_typechain: '^4.0.0',
      npm_package_devDependencies_truffle_typings: '^1.0.8',
      _: '/Users/gadiguy/workspace/babelfish-phase-1/node_modules/.bin/truffle',
      npm_config_userconfig: '/Users/gadiguy/.npmrc',
      npm_config_init_module: '/Users/gadiguy/.npm-init.js',
      npm_config_cidr: '',
      PWD: '/Users/gadiguy/workspace/babelfish-phase-1',
      npm_config_user: '',
      npm_config_node_version: '13.12.0',
      npm_package_bugs_url: 'https://github.com/mstable/mstable-contracts/issues',
      npm_package_devDependencies__types_lodash: '^4.14.138',
      JAVA_HOME: '/Library/Java/JavaVirtualMachines/jdk-14.jdk/Contents/Home',
      npm_lifecycle_event: 'script:rskTestnet',
      npm_package_devDependencies_chai: '^4.2.0',
      npm_package_scripts_migrate_ropsten: 'truffle migrate --network ropsten --reset',
      npm_config_save: 'true',
      npm_config_ignore_prepublish: '',
      npm_config_editor: 'vi',
      npm_config_auth_type: 'legacy',
      npm_package_dependencies__tenderly_hardhat_tenderly: '^1.0.3',
      npm_package_repository_type: 'git',
      npm_package_name: '@mstable/protocol',
      npm_config_tag: 'latest',
      npm_config_script_shell: '',
      npm_package_devDependencies_eslint_plugin_import: '^2.20.1',
      npm_package_scripts_migrate_rskTestnet: 'truffle migrate --network rskTestnet --reset',
      npm_package_scripts_migrate_kovan: 'truffle migrate --network kovan --reset',
      npm_config_progress: 'true',
      npm_config_global: '',
      npm_config_before: '',
      npm_config_searchstaleness: '900',
      npm_config_optional: 'true',
      npm_config_ham_it_up: '',
      npm_package_dependencies_hardhat_typechain: '^0.3.3',
      XPC_FLAGS: '0x0',
      npm_config_save_prod: '',
      npm_config_force: '',
      npm_config_bin_links: 'true',
      npm_config_searchopts: '',
      npm_package_scripts_migrate: 'truffle migrate --network development --reset',
      npm_config_node_gyp: '/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js',
      npm_config_depth: 'Infinity',
      npm_package_devDependencies_eslint_config_prettier: '^6.10.0',
      npm_config_sso_poll_frequency: '500',
      npm_config_rebuild_bundle: 'true',
      npm_package_devDependencies__typechain_truffle_v5: '^2.0.0',
      npm_package_version: '1.5.0',
      XPC_SERVICE_NAME: '0',
      npm_config_unicode: 'true',
      npm_package_devDependencies_truffle_plugin_verify: '^0.3.10',
      npm_package_devDependencies_eslint_config_airbnb_typescript: '^7.0.0',
      npm_package_devDependencies__types_bn_js: '^4.11.6',
      SHLVL: '2',
      HOME: '/Users/gadiguy',
      npm_config_fetch_retry_maxtimeout: '60000',
      npm_package_scripts_test: 'node --max_old_space_size=4096 node_modules/.bin/hardhat test;',
      npm_config_tag_version_prefix: 'v',
      npm_config_strict_ssl: 'true',
      npm_config_sso_type: 'oauth',
      npm_config_scripts_prepend_node_path: 'warn-only',
      npm_config_save_prefix: '^',
      npm_config_loglevel: 'notice',
      npm_config_ca: '',
      npm_package_devDependencies__typescript_eslint_eslint_plugin_tslint: '^2.21.0',
      npm_config_save_exact: '',
      npm_config_group: '20',
      npm_config_fetch_retry_factor: '10',
      npm_config_dev: '',
      npm_package_dependencies_ts_generator: '^0.1.1',
      npm_config_version: '',
      npm_config_prefer_offline: '',
      npm_config_cache_lock_stale: '60000',
      npm_package_dependencies_hardhat: '^2.0.3',
      npm_package_scripts_compile: 'yarn hardhat compile --force',
      npm_package_scripts_test_fork: 'yarn run compile; yarn hardhat test --network fork;',
      npm_config_otp: '',
      npm_config_cache_min: '10',
      npm_config_searchexclude: '',
      npm_config_cache: '/Users/gadiguy/.npm',
      npm_package_dependencies_solidity_coverage: '^0.7.12',
      LOGNAME: 'gadiguy',
      npm_lifecycle_script: 'truffle --network rskTestnet exec ./scripts/main.js "upgradeMasset"',
      npm_config_color: 'true',
      npm_config_proxy: '',
      npm_config_package_lock: 'true',
      npm_package_author_email: 'info@mstable.org',
      LC_CTYPE: 'UTF-8',
      npm_config_package_lock_only: '',
      npm_config_fund: 'true',
      npm_package_dependencies_sol_merger: '^3.0.1',
      npm_package_devDependencies__openzeppelin_upgrades: '2.7.2',
      npm_config_save_optional: '',
      npm_package_dependencies__nomiclabs_hardhat_truffle5: '^2.0.0',
      npm_config_ignore_scripts: '',
      npm_config_user_agent: 'npm/6.14.4 node/v13.12.0 darwin x64',
      npm_package_files_3: '/test-utils/**/*.ts',
      npm_config_cache_lock_wait: '10000',
      npm_package_devDependencies_web3: '^1.2.6',
      npm_package_devDependencies_chalk: '^3.0.0',
      npm_package_devDependencies__types_node: '^12.7.5',
      npm_package_files_2: '/build/contracts/**/*.json',
      npm_config_production: '',
      npm_package_scripts_lint_sol: 'solium -d contracts/ --fix ',
      npm_package_files_1: '!/contracts/z_mocks',
      DISPLAY: '/private/tmp/com.apple.launchd.UYAeTtc66y/org.macosforge.xquartz:0',
      npm_config_send_metrics: '',
      npm_config_save_bundle: '',
      npm_package_files_0: '/contracts/**/*.sol',
      npm_config_umask: '0022',
      npm_config_node_options: '',
      npm_config_init_version: '1.0.0',
      npm_config_init_author_name: '',
      npm_config_git: 'git',
      npm_config_scope: '',
      npm_package_dependencies_hardhat_gas_reporter: '^1.0.1',
      npm_package_devDependencies_solc: '0.5.16',
      npm_config_unsafe_perm: 'true',
      npm_config_tmp: '/var/folders/qy/_63bh9851znd2q6yk9hp76pw0000gn/T',
      npm_config_onload_script: '',
      npm_node_execpath: '/usr/local/bin/node',
      npm_config_prefix: '/usr/local',
      npm_config_link: '',
      npm_config_format_package_lock: 'true',
      npm_package_devDependencies_eslint_plugin_react: '^7.18.3',
      npm_package_files_4: '/types/**/*.ts'
    },
    title: 'node',
    argv: [
      '/usr/local/bin/node',
      '/Users/gadiguy/workspace/babelfish-phase-1/node_modules/.bin/truffle',
      '--network',
      'rskTestnet',
      'exec',
      './scripts/main.js',
      'upgradeMasset'
    ],
    execArgv: [],
    pid: 7431,
    ppid: 7430,
    execPath: '/usr/local/bin/node',
    debugPort: 9229,
    argv0: 'node',
    _preload_modules: [],
    mainModule: Module {
      id: '.',
      path: '/Users/gadiguy/workspace/babelfish-phase-1/node_modules/truffle/build',
      exports: {},
      parent: null,
      filename: '/Users/gadiguy/workspace/babelfish-phase-1/node_modules/truffle/build/cli.bundled.js',
      loaded: true,
      children: [Array],
      paths: [Array]
    },
    emit: [Function (anonymous)],
    __signal_exit_emitter__: EventEmitter {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: Infinity,
      count: 0,
      emitted: {},
      infinite: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(ts-node.register.instance)]: {
      ts: [Object],
      config: [Object],
      compile: [Function: compile],
      getTypeInfo: [Function: getTypeInfo],
      ignored: [Function: ignored],
      enabled: [Function: enabled],
      options: {}
    }
  },
  require: [Function: require],
  artifacts: Resolver {
    options: TruffleConfig {
      _deepCopy: [Array],
      _values: [Object],
      events: [EventManager],
      truffle_directory: [Getter/Setter],
      working_directory: [Getter/Setter],
      network: [Getter/Setter],
      networks: [Getter/Setter],
      verboseRpc: [Getter/Setter],
      build: [Getter/Setter],
      resolver: [Getter/Setter],
      artifactor: [Getter/Setter],
      ethpm: [Getter/Setter],
      logger: [Getter/Setter],
      compilers: [Getter/Setter],
      ens: [Getter/Setter],
      build_directory: [Getter/Setter],
      contracts_directory: [Getter/Setter],
      contracts_build_directory: [Getter/Setter],
      migrations_directory: [Getter/Setter],
      migrations_file_extension_regexp: [Getter/Setter],
      test_directory: [Getter/Setter],
      test_file_extension_regexp: [Getter/Setter],
      example_project_directory: [Getter/Setter],
      network_id: [Getter/Setter],
      network_config: [Getter/Setter],
      from: [Getter/Setter],
      gas: [Getter/Setter],
      gasPrice: [Getter/Setter],
      provider: [Getter/Setter],
      confirmations: [Getter/Setter],
      production: [Getter/Setter],
      timeoutBlocks: [Getter/Setter],
      plugins: [Array],
      api_keys: [Object],
      mocha: [Object],
      _: [Array],
      c: false,
      compile: false,
      file: undefined
    },
    sources: [ [EthPMv1], [NPM], GlobalNPM {}, [FS] ]
  },
  setImmediate: [Function: setImmediate] {
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  },
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout] {
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  },
  web3: Web3Shim {
    currentProvider: [Getter/Setter],
    _requestManager: RequestManager {
      provider: [HDWalletProvider],
      providers: [Object],
      subscriptions: {}
    },
    givenProvider: null,
    providers: {
      WebsocketProvider: [Function: WebsocketProvider],
      HttpProvider: [Function: HttpProvider],
      IpcProvider: [Function: IpcProvider]
    },
    _provider: HDWalletProvider {
      walletHdpath: "m/44'/60'/0'/0/",
      wallets: [Object],
      addresses: [Array],
      chainSettings: {},
      engine: [Web3ProviderEngine],
      hdwallet: [EthereumHDKey],
      initialized: [Promise],
      hardfork: 'istanbul',
      send: [Function (anonymous)],
      _alreadyWrapped: true
    },
    setProvider: [Function (anonymous)],
    BatchRequest: [Function: bound Batch],
    extend: [Function: ex] {
      formatters: [Object],
      utils: [Object],
      Method: [Function: Method]
    },
    version: '1.2.1',
    utils: {
      _fireError: [Function: _fireError],
      _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
      _flattenTypes: [Function: _flattenTypes],
      randomHex: [Function: randomHex],
      _: [Function],
      BN: [Function],
      isBN: [Function: isBN],
      isBigNumber: [Function: isBigNumber],
      isHex: [Function: isHex],
      isHexStrict: [Function: isHexStrict],
      sha3: [Function],
      keccak256: [Function],
      soliditySha3: [Function: soliditySha3],
      isAddress: [Function: isAddress],
      checkAddressChecksum: [Function: checkAddressChecksum],
      toChecksumAddress: [Function: toChecksumAddress],
      toHex: [Function: toHex],
      toBN: [Function: toBN],
      bytesToHex: [Function: bytesToHex],
      hexToBytes: [Function: hexToBytes],
      hexToNumberString: [Function: hexToNumberString],
      hexToNumber: [Function: hexToNumber],
      toDecimal: [Function: hexToNumber],
      numberToHex: [Function: numberToHex],
      fromDecimal: [Function: numberToHex],
      hexToUtf8: [Function: hexToUtf8],
      hexToString: [Function: hexToUtf8],
      toUtf8: [Function: hexToUtf8],
      utf8ToHex: [Function: utf8ToHex],
      stringToHex: [Function: utf8ToHex],
      fromUtf8: [Function: utf8ToHex],
      hexToAscii: [Function: hexToAscii],
      toAscii: [Function: hexToAscii],
      asciiToHex: [Function: asciiToHex],
      fromAscii: [Function: asciiToHex],
      unitMap: [Object],
      toWei: [Function: toWei],
      fromWei: [Function: fromWei],
      padLeft: [Function: leftPad],
      leftPad: [Function: leftPad],
      padRight: [Function: rightPad],
      rightPad: [Function: rightPad],
      toTwosComplement: [Function: toTwosComplement]
    },
    eth: Eth {
      currentProvider: [Getter/Setter],
      _requestManager: [RequestManager],
      givenProvider: null,
      providers: [Object],
      _provider: [HDWalletProvider],
      setProvider: [Function (anonymous)],
      BatchRequest: [Function: bound Batch],
      extend: [Function],
      defaultAccount: [Getter/Setter],
      defaultBlock: [Getter/Setter],
      clearSubscriptions: [Function (anonymous)],
      net: [Net],
      accounts: [Accounts],
      personal: [Personal],
      Contract: [Function],
      Iban: [Function],
      abi: ABICoder {},
      ens: [ENS],
      getNodeInfo: [Function],
      getProtocolVersion: [Function],
      getCoinbase: [Function],
      isMining: [Function],
      getHashrate: [Function],
      isSyncing: [Function],
      getGasPrice: [Function],
      getAccounts: [Function],
      getBlockNumber: [Function],
      getBalance: [Function],
      getStorageAt: [Function],
      getCode: [Function],
      getBlock: [Function],
      getUncle: [Function],
      getBlockTransactionCount: [Function],
      getBlockUncleCount: [Function],
      getTransaction: [Function],
      getTransactionFromBlock: [Function],
      getTransactionReceipt: [Function],
      getTransactionCount: [Function],
      sendSignedTransaction: [Function],
      signTransaction: [Function],
      sendTransaction: [Function],
      sign: [Function],
      call: [Function],
      estimateGas: [Function],
      submitWork: [Function],
      getWork: [Function],
      getPastLogs: [Function],
      subscribe: [Function (anonymous)]
    },
    shh: Shh {
      currentProvider: [Getter/Setter],
      _requestManager: [RequestManager],
      givenProvider: null,
      providers: [Object],
      _provider: [HDWalletProvider],
      setProvider: [Function (anonymous)],
      BatchRequest: [Function: bound Batch],
      extend: [Function],
      net: [Net],
      subscribe: [Function (anonymous)],
      getVersion: [Function],
      getInfo: [Function],
      setMaxMessageSize: [Function],
      setMinPoW: [Function],
      markTrustedPeer: [Function],
      newKeyPair: [Function],
      addPrivateKey: [Function],
      deleteKeyPair: [Function],
      hasKeyPair: [Function],
      getPublicKey: [Function],
      getPrivateKey: [Function],
      newSymKey: [Function],
      addSymKey: [Function],
      generateSymKeyFromPassword: [Function],
      hasSymKey: [Function],
      getSymKey: [Function],
      deleteSymKey: [Function],
      newMessageFilter: [Function],
      getFilterMessages: [Function],
      deleteMessageFilter: [Function],
      post: [Function],
      unsubscribe: [Function]
    },
    bzz: Bzz {
      givenProvider: null,
      currentProvider: null,
      isAvailable: [Function (anonymous)],
      upload: [Function (anonymous)],
      download: [Function (anonymous)]
    },
    networkType: 'ethereum'
  },
  interfaceAdapter: Web3InterfaceAdapter {
    web3: Web3Shim {
      currentProvider: [Getter/Setter],
      _requestManager: [RequestManager],
      givenProvider: null,
      providers: [Object],
      _provider: [HDWalletProvider],
      setProvider: [Function (anonymous)],
      BatchRequest: [Function: bound Batch],
      extend: [Function],
      version: '1.2.1',
      utils: [Object],
      eth: [Eth],
      shh: [Shh],
      bzz: [Bzz],
      networkType: 'ethereum'
    }
  }
}
